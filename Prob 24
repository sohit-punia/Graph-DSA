Dijkstra Algorithm 

vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
    // Step 1: Build adjacency list
    vector<vector<pair<int,int>>> adj(V);
    for (auto &e : edges) {
        int u = e[0];
        int v = e[1];
        int w = e[2];
        adj[u].push_back({v, w});
        adj[v].push_back({u, w}); // remove if graph is directed
    }

    set<pair<int,int>> st;         // {distance, node}
    vector<int> dist(V, INT_MAX);

    dist[src] = 0;
    st.insert({0, src});

    // Step 2: Dijkstra's algorithm
    while (!st.empty()) {
        auto it = *(st.begin());
        int dis = it.first;
        int node = it.second;
        st.erase(st.begin());

        for (auto edge : adj[node]) {
            int adjNode = edge.first;
            int edgW = edge.second;

            if (dis + edgW < dist[adjNode]) {
                // erase old pair if it existed
                if (dist[adjNode] != INT_MAX) {
                    st.erase({dist[adjNode], adjNode});
                }

                dist[adjNode] = dis + edgW;
                st.insert({dist[adjNode], adjNode});
            }
        }
    }

    return dist;
}

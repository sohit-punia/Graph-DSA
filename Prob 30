1976. Number of Ways to Arrive at Destination

    int countPaths(int n, vector<vector<int>>& roads) {
        const long long INF = (long long)4e18;
        const int MOD = 1'000'000'007;
        vector<vector<pair<int,int>>> adj(n);
        for (auto it : roads) {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        // Dijkstra
        vector<long long> dist(n, INF);
        vector<int> ways(n, 0);

        // min-heap of {dist, node}
        using P = pair<long long,int>;
        priority_queue<P, vector<P>, greater<P>> pq;

        dist[0] = 0;
        ways[0] = 1;
        pq.push({0, 0});
        while (!pq.empty()) {
            auto [d, u] = pq.top(); pq.pop();
            if (d > dist[u]) continue;  // stale

            for (auto &[v, w] : adj[u]) {
                long long nd = d + w;

                if (nd < dist[v]) {
                    dist[v] = nd;
                    ways[v] = ways[u];
                    pq.push({nd, v});
                } else if (nd == dist[v]) {
                    ways[v] = (ways[v] + ways[u]) % MOD;
                }
            }
        }

        return ways[n-1] % MOD;
    }

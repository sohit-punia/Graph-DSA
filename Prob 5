130. Surrounded Regions

class Solution {
    void dfs(int r, int c, vector<vector<char>>& board, int n, int m,
             vector<vector<int>>& vis, int drow[], int dcol[]) {
        vis[r][c] = 1;                 // mark as visited / safe
        // explore 4 directions
        for (int k = 0; k < 4; ++k) {
            int nr = r + drow[k];
            int nc = c + dcol[k];
            if (nr >= 0 && nr < n && nc >= 0 && nc < m
                && !vis[nr][nc] && board[nr][nc] == 'O') {
                dfs(nr, nc, board, n, m, vis, drow, dcol);
            }
        }
    }
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty() || board[0].empty()) return;
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        int drow[4] = {-1, 0, 1, 0};
        int dcol[4] = {0, 1, 0, -1};

        // Run DFS from 'O's on the border to mark safe 'O's
        // Top and bottom rows
        for (int j = 0; j < m; ++j) {
            if (board[0][j] == 'O' && !vis[0][j]) dfs(0, j, board, n, m, vis, drow, dcol);
            if (board[n-1][j] == 'O' && !vis[n-1][j]) dfs(n-1, j, board, n, m, vis, drow, dcol);
        }
        // Left and right columns (excluding corners already processed is optional)
        for (int i = 0; i < n; ++i) {
            if (board[i][0] == 'O' && !vis[i][0]) dfs(i, 0, board, n, m, vis, drow, dcol);
            if (board[i][m-1] == 'O' && !vis[i][m-1]) dfs(i, m-1, board, n, m, vis, drow, dcol);
        }
        // Flip all non-visited 'O' -> 'X' (these are surrounded)
        // Restore visited markers are not needed because we used vis array
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (board[i][j] == 'O' && vis[i][j] == 0) {
                    board[i][j] = 'X';
                }
            }
        }

    }
};

1091. Shortest Path in Binary Matrix

int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
    int n = grid.size();
    if (n == 0) return -1;
    int m = grid[0].size();

    // start or end blocked
    if (grid[0][0] == 1 || grid[n-1][m-1] == 1) return -1;

    queue<pair<int, pair<int, int>>> q; // {dist, {r, c}}
    vector<vector<int>> dist(n, vector<int>(m, INT_MAX));

    // 8 directions
    int dr[8] = {-1,-1,-1, 0, 0, 1, 1, 1};
    int dc[8] = {-1, 0, 1,-1, 1,-1, 0, 1};

    // ✅ Initialize start
    dist[0][0] = 1;
    q.push({1, {0, 0}});

    while (!q.empty()) {
        auto cur = q.front(); 
        q.pop();

        int d = cur.first;
        int r = cur.second.first;
        int c = cur.second.second;

        // ✅ reached target
        if (r == n - 1 && c == m - 1) return d;

        for (int k = 0; k < 8; ++k) {
            int nr = r + dr[k];
            int nc = c + dc[k];

            if (nr >= 0 && nr < n && nc >= 0 && nc < m
                && grid[nr][nc] == 0 && d + 1 < dist[nr][nc]) {
                dist[nr][nc] = d + 1;
                q.push({d + 1, {nr, nc}});
            }
        }
    }
    return -1;
}

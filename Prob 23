Dijkstra Algorithm


vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
    // Step 1: Build adjacency list from edge list
    vector<vector<pair<int,int>>> adj(V);
    for (auto &e : edges) {
        int u = e[0];
        int v = e[1];
        int w = e[2];
        adj[u].push_back({v, w});
        adj[v].push_back({u, w}); // if graph is undirected
    }

    // Step 2: Min-heap for Dijkstra
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;

    vector<int> dist(V, INT_MAX);
    dist[src] = 0;
    pq.push({0, src});

    // Step 3: Standard Dijkstra
    while (!pq.empty()) {
        int dis  = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        for (auto &it : adj[node]) {
            int adjNode    = it.first;
            int edgeWeight = it.second;

            if (dis + edgeWeight < dist[adjNode]) {
                dist[adjNode] = dis + edgeWeight;
                pq.push({dist[adjNode], adjNode});
            }
        }
    }
    return dist;
}

Shortest path in Directed Acyclic Graph (by toposort) 


#include <bits/stdc++.h>
using namespace std;

void toposort(int node , vector<pair<int,int>> adj[] , int vis[] , stack<int> &st){
    vis[node] = 1;
    for(auto it : adj[node]){
        int v = it.first;
        if(!vis[v]){
            toposort(v , adj , vis , st);
        }
    }
    st.push(node);
}

class Solution {
public:
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        // 1. make graph
        vector<pair<int,int>> adj[V];
        for(int i = 0; i < E; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj[u].push_back({v , wt});
        }

        // 2. topo sort
        int vis[V] = {0};
        stack<int> st;
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                toposort(i , adj , vis , st);
            }
        }

        // 3. distance array
        vector<int> dist(V , INT_MAX);
        dist[0] = 0; // source = 0

        while(!st.empty()){
            int node = st.top();
            st.pop();

            if(dist[node] != INT_MAX){
                for(auto it : adj[node]){
                    int v = it.first;
                    int wt = it.second;
                    if(dist[node] + wt < dist[v]){
                        dist[v] = dist[node] + wt;
                    }
                }
            }
        }

        // 4. convert INF to -1
        for(int i = 0; i < V; i++){
            if(dist[i] == INT_MAX) dist[i] = -1;
        }

        return dist;
    }
};

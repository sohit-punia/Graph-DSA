Shortest Path in Weighted undirected graph

vector<int> shortestPath(int n, int m, vector<vector<int>> &edges) {
    // Build adjacency list (1-indexed)
    vector<vector<pair<int,int>>> adj(n + 1);
    for (const auto &e : edges) {
        int u = e[0], v = e[1], w = e[2];
        adj[u].push_back({v, w});
        adj[v].push_back({u, w}); // undirected
    }

    // Dijkstra
    using P = pair<long long,int>;                       // {dist, node}
    priority_queue<P, vector<P>, greater<P>> pq;
    const long long INF = LLONG_MAX;

    vector<long long> dist(n + 1, INF);
    vector<int> parent(n + 1, -1);

    dist[1] = 0;
    pq.push({0, 1});

    while (!pq.empty()) {
        auto [d, u] = pq.top(); pq.pop();
        if (d > dist[u]) continue;                       // skip stale entries

        for (auto [v, w] : adj[u]) {
            if (d + w < dist[v]) {
                dist[v] = d + w;
                parent[v] = u;
                pq.push({dist[v], v});
            }
        }
    }

    // No path from 1 to n
    if (dist[n] == INF) return {-1};

    // Reconstruct path: n -> 1
    vector<int> path;
    for (int cur = n; cur != -1; cur = parent[cur]) path.push_back(cur);
    reverse(path.begin(), path.end());

    // Output format: [totalWeight, nodes...]
    vector<int> ans;
    ans.push_back(static_cast<int>(dist[n]));            // driver expects int
    ans.insert(ans.end(), path.begin(), path.end());
    return ans;
}

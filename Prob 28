787. Cheapest Flights Within K Stops

    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adj(n);
        for (auto it : flights) {
            adj[it[0]].push_back({it[1], it[2]});
        }

        queue<pair< int , pair<int , int>>> q;
        //(stops , {node , ditance})
        q.push({0, {src, 0}});
        vector<int> dist(n , INT_MAX);
        dist[src] = 0;
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int stops = it.first;
            int node = it.second.first;
            int cost = it.second.second;
            if(stops > k) continue;
            for(auto iter : adj[node]){
                int adjNode = iter.first;
                int edgeWeight = iter.second;

                if(cost + edgeWeight < dist[adjNode] && stops <= k){
                    dist[adjNode] = cost + edgeWeight;
                    q.push({stops+1 , {adjNode , cost + edgeWeight}});
                }
            }
        } 
        if(dist[dst] == INT_MAX) return -1;
        return dist[dst];
    }
